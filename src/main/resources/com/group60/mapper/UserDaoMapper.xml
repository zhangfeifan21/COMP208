<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.group60.dao.UserDao">

    <select id="findByEmail" parameterType="String" resultType="User">
        select email_address, password, user_id from `users`
        where email_address = #{email_address}
    </select>
    <insert id="saveUser" parameterType="User" useGeneratedKeys="true" keyProperty="user_id">
        insert into `users` (user_id, email_address, password)
        values (#{user_id}, #{email_address}, #{password})
    </insert>
    <select id="lists" resultType="Party">
        select party_id, title, parties.description, max_member, current_member, place, start_time, belongs_to, users.email_address as holder_name
        from `parties`, `users`
        where belongs_to = users.user_id
    </select>
    <insert id="saveParty" useGeneratedKeys="true" keyProperty="party.party_id">
        insert into `parties` (party_id, title, description, max_member, current_member, place, start_time, belongs_to)
        values (#{party.party_id}, #{party.title}, #{party.description}, #{party.max_member}, '1', #{party.place}, #{party.start_time}, #{user_id})
    </insert>
    <select id="myParty" parameterType="int" resultType="Party">
        select tmp.party_id, tmp.title, tmp.description, tmp.max_member, tmp.current_member, tmp.place, tmp.start_time, tmp.belongs_to, users.email_address as holder_name
        from (
                 select p.party_id as party_id, title, description, max_member, current_member, place, start_time, belongs_to
                 from `parties` as p, `users_parties` as up, `users` as u
                 where u.user_id = #{user_id} and u.user_id = up.user_id and p.party_id = up.party_id
                 union
                 select party_id as party_id, title, description, max_member, current_member, place, start_time, belongs_to
                 from `parties`
                 where belongs_to = #{user_id}

             ) tmp, users
        where tmp.belongs_to = users.user_id
        order by party_id
    </select>
    <select id="findPair" resultType="Pair">
        select *
        from `users_parties`
        where party_id = #{party_id} and user_id = #{user_id}
    </select>
    <insert id="joinParty">
        insert into `users_parties` (party_id, user_id)
        values (#{party_id}, #{user_id})
    </insert>
    <select id="checkParty" parameterType="int" resultType="CheckMember">
        select max_member, current_member
        from `parties`
        where party_id = #{party_id}
    </select>
    <update id="addMember" parameterType="int">
        update `parties`
        set current_member = current_member + '1'
        where party_id = #{party_id}
    </update>
    <update id="deleteMember" parameterType="int">
        update `parties`
        set current_member = current_member - '1'
        where party_id = #{party_id}
    </update>
    <delete id="quitParty">
        delete from `users_parties`
        where user_id = #{user_id} and party_id = #{party_id};
    </delete>
    <delete id="emptyMember" parameterType="int">
        delete
        from `users_parties`
        where party_id = #{party_id};
    </delete>
    <delete id="dismissParty" parameterType="int">
        delete
        from `parties`
        where party_id = #{party_id};
    </delete>
    <update id="saveDetail">
        update `users`
        set gender = #{detail.gender}, interests = #{detail.interests}, description = #{detail.description}, contact_mobile = #{detail.contact_mobile}, contact_email=#{detail.contact_email}
        where user_id = #{user_id}
    </update>
    <select id="getDetail" parameterType="int" resultType="Detail">
        select gender, interests, description, contact_mobile, contact_email
        from `users`
        where user_id = #{user_id}
    </select>
</mapper>